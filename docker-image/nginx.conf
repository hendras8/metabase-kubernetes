user nginx;
pcre_jit on;
worker_processes auto;
include /etc/nginx/modules/*.conf;

events {
	worker_connections 1024;
}

http {
	include /etc/nginx/mime.types;
	default_type application/octet-stream;
	server_tokens off;
	client_max_body_size 1m;
	sendfile on;
	tcp_nopush on;
	gzip_vary on;

	map $request $loggable {
		~^GET   0;
		default 1;
	}

log_format log_req_metabase escape=json
       '{'
         '"time":"$time_local",'
         '"remote_address":"$remote_addr",'
         '"http_method":"$request",'
         '"http_status":"$status",'
         '"request_time":"$request_time",'
         '"request_header":"$req_header",'
         '"request_body":"$obfuscated_request_body",'
         '"http_referer":"$http_referer",'
         '"http_user_agent":"$http_user_agent",'
         '"body_bytes_sent": "$body_bytes_sent"'
       '}';


map $request_body $obfuscated_request_body {
    "~(.*[{,]\\x22password\\x22:\\x22).*?(\\x22[,}].*)" $1********$2;
    default $request_body;
}


	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}


	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for"';

	server {
		listen 80;

		client_max_body_size 25m;
		client_body_buffer_size 128k;
		client_body_in_single_buffer on;

		error_log /dev/stderr warn;
		access_log /dev/stdout log_req_metabase;
		lua_need_request_body on;

		header_filter_by_lua '
			local h = ngx.req.get_headers()
			for k, v in pairs(h) do
		      	ngx.var.req_header = ngx.var.req_header .. k.."="..v.." "
		  	end
		 	local rh = ngx.resp.get_headers()
		  	for k, v in pairs(rh) do
		      	ngx.var.resp_header = ngx.var.resp_header .. k.."="..v.." "
		  	end
		';

		body_filter_by_lua '
			local resp_body = string.sub(ngx.arg[1], 1, -1)
			ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
			if ngx.arg[2] then
		 		ngx.var.resp_body = ngx.ctx.buffered
		  	end
		';

		set $resp_body "";
		set $req_header "";
		set $resp_header "";

		location / {
			proxy_pass http://localhost:3000/;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Scheme $scheme;
			proxy_connect_timeout 1;
			proxy_send_timeout 30;
			proxy_read_timeout 30;
		}
	}
}
